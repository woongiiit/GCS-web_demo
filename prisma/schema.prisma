// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  studentId   String?  @unique
  major       String?
  phone       String
  role        UserRole @default(GENERAL)
  
  // 학생 인증 관련 필드
  verificationStatus VerificationStatus @default(PENDING)
  verificationImageUrl String?  // 학생 인증 이미지 URL
  verificationRequestedAt DateTime?  // 인증 요청 시간
  verificationApprovedAt DateTime?   // 인증 승인 시간
  verificationRejectedAt DateTime?   // 인증 거부 시간
  verificationNote String?            // 운영자 메모 (거부 사유 등)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  posts       Post[]
  comments    Comment[]
  orders      Order[]
  projects    Project[]
  news        News[]
  passwordResetTokens PasswordResetToken[]
  postLikes   PostLike[]
  projectLikes ProjectLike[]
  newsLikes   NewsLike[]

  @@index([role])
  @@index([verificationStatus, createdAt])
  @@map("users")
}

// 게시글 모델 (커뮤니티)
model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    PostCategory
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  images      String[] // 게시글 이미지 배열
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  views       Int      @default(0)

  // 관계
  comments    Comment[]
  likes       PostLike[]

  @@index([category, createdAt])
  @@index([authorId, createdAt])
  @@index([createdAt, category])
  @@map("posts")
}

// 댓글 모델
model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, createdAt])
  @@index([authorId, createdAt])
  @@map("comments")
}

// 좋아요 모델 (Community 게시글용)
model PostLike {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId, createdAt])
  @@index([userId, createdAt])
  @@map("post_likes")
}

// 좋아요 모델 (Archive 프로젝트용)
model ProjectLike {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@index([projectId, createdAt])
  @@index([userId, createdAt])
  @@map("project_likes")
}

// 좋아요 모델 (Archive 뉴스용)
model NewsLike {
  id        String   @id @default(cuid())
  newsId    String
  news      News     @relation(fields: [newsId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([newsId, userId])
  @@index([newsId, createdAt])
  @@index([userId, createdAt])
  @@map("news_likes")
}

// 상품 카테고리 모델
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique // URL용 슬러그 (apparel, stationary, bag, life, accessory)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  products    Product[]

  @@index([slug])
  @@map("categories")
}

// 상품 모델
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  shortDescription String? // 짧은 설명 (제품 상세 페이지용)
  price       Int      // 원 단위
  originalPrice Int?
  discount    Int?     // 할인율 (%)
  stock       Int      @default(0)
  imageUrl    String?
  images      String[] // 상품 대표 이미지 배열
  contentImages String[] // 본문용 이미지 배열
  brand       String?  // 브랜드명 (DEUX 등)
  tags        String[] // 태그 배열
  features    String[] // 특징 배열
  sizes       String[] // 사이즈 배열 (의류용)
  colors      String[] // 색상 배열 (의류용)
  isActive    Boolean  @default(true)
  isBestItem  Boolean  @default(false) // Best Item 여부
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  orderItems  OrderItem[]
  productDetails ProductDetail[]

  @@index([categoryId, isActive])
  @@index([isBestItem], map: "idx_products_best_item")
  @@index([isActive, createdAt])
  @@index([isActive, isBestItem, createdAt])
  @@index([isActive, categoryId, createdAt])
  @@index([isBestItem, isActive])
  @@map("products")
}

// 상품 상세 정보 모델
model ProductDetail {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productionYear Int?  // 제작년도
  project     String?  // 프로젝트명
  material    String?  // 제품 소재
  color       String?  // 제품 색상
  size        String?  // 사이즈
  printingMethod String? // 프린팅 방식
  manufacturer String? // 제조 협력업체
  shippingInfo String? // 배송 안내 및 반품 고지
  qualityStandard String? // 품질 보증 기준
  customerService String? // 고객 센터 안내
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("product_details")
}

// 주문 모델
model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Int         // 총 금액
  shippingAddress String
  phone       String
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 관계
  orderItems  OrderItem[]

  @@index([userId, status, createdAt])
  @@index([status, createdAt])
  @@map("orders")
}

// 주문 아이템 모델
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int     // 주문 당시 가격

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

// 프로젝트 모델 (아카이브)
model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String
  year        Int
  semester    String?
  teamMembers String[]
  technologies String[]
  githubUrl   String?
  demoUrl     String?
  imageUrl    String?
  images      String[] // 프로젝트 이미지 배열
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isFeatured  Boolean  @default(false) // 추천 프로젝트 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  likes       ProjectLike[]

  @@index([isFeatured, year])
  @@index([createdAt])
  @@index([authorId, isFeatured])
  @@index([isFeatured, year, createdAt])
  @@index([year, isFeatured, createdAt])
  @@index([createdAt, isFeatured])
  @@map("projects")
}

// 뉴스 모델 (아카이브)
model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  year        Int
  imageUrl    String?
  images      String[] // 뉴스 이미지 배열
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  isFeatured  Boolean  @default(false) // 추천 뉴스 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  likes       NewsLike[]

  @@index([year, createdAt])
  @@index([isFeatured, createdAt])
  @@index([authorId, createdAt])
  @@index([year, isFeatured, createdAt])
  @@index([createdAt, isFeatured])
  @@map("news")
}

// 전공 모델
model Major {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  subjects    Subject[]

  @@map("majors")
}

// 과목 모델
model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String
  credits     Int
  semester    String
  year        Int
  category    SubjectCategory // 예술, 경영, 공학
  majorId     String
  major       Major    @relation(fields: [majorId], references: [id])
  professorId String
  professor   Professor @relation(fields: [professorId], references: [id])
  isActive    Boolean  @default(true) // 활성 과목 여부
  displayOrder Int?    // 표시 순서
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subjects")
}

// 교수진 모델
model Professor {
  id          String   @id @default(cuid())
  name        String
  title       String   // 직급 (교수, 부교수, 조교수, 대우교수 등)
  email       String   @unique
  phone       String?
  office      String?
  affiliation String?  // 소속 (동국대학교 경영대학 GCS연계전공 등)
  company     String?  // 회사명 (프린팅플랫폼(주) 등)
  position    String?  // 직책 (대표이사, 상무 등)
  courses     String[] // 담당 과목 배열
  researchAreas String[] // 연구 분야
  education   String?  // 학력
  experience  String?  // 경력
  imageUrl    String?
  isActive    Boolean  @default(true) // 활성 교수 여부
  displayOrder Int?    // 표시 순서
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  subjects    Subject[]

  @@map("professors")
}

// 비밀번호 재설정 토큰 모델
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId, createdAt])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// 이메일 인증번호 모델
model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, code])
  @@index([email, createdAt])
  @@index([expiresAt])
  @@map("email_verification_codes")
}

// 관리자 콘텐츠 관리 모델 (개선된 구조)
model AdminContent {
  id          String   @id @default(cuid())
  section     ContentSection
  title       String?
  content     String?  // HTML 콘텐츠
  description String?  // 한글 소개글
  subtitle    String?  // 영어 소개글
  imageUrl    String?  // 이미지 URL
  imageAlt    String?  // 이미지 alt 텍스트
  order       Int      @default(0)  // 표시 순서
  isActive    Boolean  @default(true)
  updatedBy   String?  // 마지막 수정자 ID
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  // 관계
  items       AdminContentItem[]  // 하위 콘텐츠 아이템들

  @@unique([section])
  @@index([section, isActive, order])
  @@map("admin_contents")
}

// 관리자 콘텐츠 아이템 모델 (섹션 내 세부 항목들)
model AdminContentItem {
  id          String   @id @default(cuid())
  contentId   String
  content     AdminContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  title       String?
  subtitle    String?  // 부제목
  description String?  // 설명
  htmlContent String?  // HTML 콘텐츠
  imageUrl    String?  // 이미지 URL
  imageAlt    String?  // 이미지 alt 텍스트
  order       Int      @default(0)  // 표시 순서
  isActive    Boolean  @default(true)
  type        String?  // 영역과 과목 구분 ('area' | 'subject')
  updatedBy   String?  // 마지막 수정자 ID
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([contentId, isActive, order])
  @@map("admin_content_items")
}

// Enums
enum UserRole {
  GENERAL   // 일반회원 (상품 구매만 가능)
  MAJOR     // 전공회원 (상품 구매 + 글쓰기 가능)
  ADMIN     // 운영자 (모든 권한)
}

enum VerificationStatus {
  PENDING    // 인증 대기 (아직 요청하지 않음)
  REQUESTED  // 인증 요청됨 (운영자 승인 대기)
  APPROVED   // 승인됨 (학생 회원으로 전환됨)
  REJECTED   // 거부됨
}

enum PostCategory {
  BOARD
  LOUNGE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum SubjectCategory {
  ART      // 예술
  BUSINESS // 경영
  ENGINEERING // 공학
}

enum ContentSection {
  GCS_WEB      // GCS:Web
  MAJOR_INTRO  // 전공 소개
  SUBJECTS     // 개설 과목
  PROFESSORS   // 교수진
}