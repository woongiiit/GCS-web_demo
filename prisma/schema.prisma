// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  name        String
  studentId   String   @unique
  major       String
  phone       String
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  posts       Post[]
  comments    Comment[]
  orders      Order[]
  projects    Project[]
  news        News[]

  @@map("users")
}

// 게시글 모델 (커뮤니티)
model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    PostCategory
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  views       Int      @default(0)
  likes       Int      @default(0)

  // 관계
  comments    Comment[]

  @@map("posts")
}

// 댓글 모델
model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// 상품 카테고리 모델
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  products    Product[]

  @@map("categories")
}

// 상품 모델
model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Int      // 원 단위
  originalPrice Int?
  discount    Int?     // 할인율 (%)
  stock       Int      @default(0)
  imageUrl    String?
  tags        String[] // 태그 배열
  features    String[] // 특징 배열
  sizes       String[] // 사이즈 배열 (의류용)
  colors      String[] // 색상 배열 (의류용)
  isActive    Boolean  @default(true)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  orderItems  OrderItem[]

  @@map("products")
}

// 주문 모델
model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Int         // 총 금액
  shippingAddress String
  phone       String
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 관계
  orderItems  OrderItem[]

  @@map("orders")
}

// 주문 아이템 모델
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int     // 주문 당시 가격

  @@map("order_items")
}

// 프로젝트 모델 (아카이브)
model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String
  year        Int
  semester    String?
  teamMembers String[]
  technologies String[]
  githubUrl   String?
  demoUrl     String?
  imageUrl    String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

// 뉴스 모델 (아카이브)
model News {
  id          String   @id @default(cuid())
  title       String
  content     String
  summary     String?
  year        Int
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("news")
}

// 전공 모델
model Major {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  subjects    Subject[]

  @@map("majors")
}

// 과목 모델
model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String
  credits     Int
  semester    String
  year        Int
  majorId     String
  major       Major    @relation(fields: [majorId], references: [id])
  professorId String
  professor   Professor @relation(fields: [professorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("subjects")
}

// 교수진 모델
model Professor {
  id          String   @id @default(cuid())
  name        String
  title       String   // 직급 (교수, 부교수, 조교수 등)
  email       String   @unique
  phone       String?
  office      String?
  researchAreas String[] // 연구 분야
  education   String?  // 학력
  experience  String?  // 경력
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  subjects    Subject[]

  @@map("professors")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum PostCategory {
  BOARD
  LOUNGE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}